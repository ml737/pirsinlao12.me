var fur = document.getElementById("fur");
var canvas = document.getElementById("txt");
var ctx = canvas.getContext("2d");
var txt = canvas.dataset.txt;
var size = 112;
var lines = [];
var mouse = { x: 0, y: 0, mx: 0, my: 0 };

function start() {
  canvas.width = 400;
  canvas.height = 200;

  fillText(txt, size);

  var points = getCountourPoints(26);
  createLines(points, size / 4, size / 6);

  if (fur.complete) draw();
  else fur.addEventListener("load", draw);
  
  canvas.addEventListener("mousemove", mousemove);
  canvas.addEventListener("touchmove", touchmove);
}

function fillText(t, s) {
  var w = canvas.width;
  var h = canvas.height;
  ctx.globalCompositeOperation = "source-over";
  ctx.filter = "blur(2px)";
  ctx.font = "bold " + s + "px sans-serif";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.fillStyle = "white";
  ctx.fillText(txt, w / 2, h / 2);
}

function getCountourPoints(s) {
  var w = canvas.width;
  var h = canvas.height;
  var data = ctx.getImageData(0, 0, w, h).data;
  var array = [];
  for (var p = 0; p < data.length; p += 4 * s) {
    var x = Math.floor((p / 4) % w);
    var y = Math.floor(p / 4 / w);
    if (data[p] > 0 && data[p + 3] > 8 && data[p + 3] < 248) {
      array.push({ x, y });
    }
  }
  return array;
}

function createLines(array, sx, sy) {
  for (var i = 0; i < array.length; i++) {
    for (var j = 0; j < 2; j++) {
      var p = array[i];
      var rx = (Math.random() - 0.5) * sx;
      var ry = (Math.random() - 0.5) * (sy || sx);
      lines.push({
        start: p,
        dist: { x: rx, y: ry },
        mov: { x: 0, y: 0 }
      });
    }
  }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  fillText(txt, size);
  drawLines(lines);
  clipImage();

  requestAnimationFrame(draw);
}

function drawLines(array) {
  var mouseDist = 30;
  var mouseMax = 5;
  var mouseRelax = 0.6;
  ctx.filter = "blur(0)";
  for (var i = 0; i < array.length; i++) {
    var l = array[i];
    // increasing line width
    for (var k = 1; k < 3; k++) {
      var endx = l.start.x + l.dist.x;
      var endy = l.start.y + l.dist.y;
      // mouse movement distance
      var mdx = Math.abs(mouse.x - endx);
      var mdy = Math.abs(mouse.y - endy);
      var d = (mdx + mdy > mouseDist) ? 0 : 1;
      // move touching lines
      if (mouse.update && d) {
        l.mov.x += mouse.mx;
        l.mov.y += mouse.my;
      }
      // limit mouse movement
      l.mov.x = minmax(l.mov.x, -mouseMax, mouseMax);
      l.mov.y = minmax(l.mov.y, -mouseMax, mouseMax);
      // smooth mouse movement
      l.mov.x *= mouseRelax;
      l.mov.y *= mouseRelax;
      // final distance
      var dx = l.mov.x + l.dist.x / k;
      var dy = l.mov.y + l.dist.y / k;
      ctx.lineWidth = k * 0.4;
      ctx.beginPath();
      ctx.moveTo(l.start.x, l.start.y);
      ctx.lineTo(l.start.x + dx, l.start.y + dy);
      ctx.strokeStyle = "white";
      ctx.stroke();
    }
  }
  mouse.update = false;
}

function clipImage() {
  ctx.globalCompositeOperation = "source-in";
  ctx.drawImage(fur, 0, 0, canvas.width, canvas.height);
}

function mousemove(e) {
  mouse = {
    x: e.offsetX,
    y: e.offsetY,
    mx: e.movementX,
    my: e.movementY,
    update: true
  };
}

function touchmove(e) {
  var touch = {
    x: e.touches[0].clientX - canvas.offsetLeft,
    y: e.touches[0].clientY - canvas.offsetTop,
    mx: e.touches[0].clientX - mouse.x,
    my: e.touches[0].clientY - mouse.y,
    update: true
  };
  mouse = touch;
}

function minmax(value, min, max) {
  return Math.max(min, Math.min(max, value));
}

start();
